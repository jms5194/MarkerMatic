name: Cross-Platform Build with Py2App and Pyinstaller

# Call when commit is tagged with v*
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  # Creates a release in Github
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          draft: true
          prerelease: false
          generate_release_notes: false

  ci_builds:
    # Trigger standalone CI builds after release has been created to upload assets to
    needs: create_release
    runs-on: ubuntu-latest
    name: Trigger CI Builds
    steps:
      - name: Trigger CI builds
        run: 'curl --silent --output /dev/null --show-error --fail --json ''{"branch":"main", "variables": {"ref":"${{ github.ref_name }}"}}'' -X POST -H "Authorization: Bearer ${{ secrets.trigger_ci_build_token }}" "${{ secrets.trigger_ci_build_url }}"'

  build:
    # When create_release is finished
    needs: create_release

    strategy:
      matrix:
        # Building for Mac Intel, Mac ARM
        os: [macos-x86, macos-arm64]
        include:
          - os: macos-x86
            arch: x64
          - os: macos-arm64
            arch: arm64
    # macos-latest is ARM for macOS >= 14
    runs-on: macos-latest

    steps:
      # Checkout the project from Github
      - uses: actions/checkout@v4
      # Get python installed on the runner
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          architecture: ${{ matrix.arch }}
      # Upgrade Pip and install dependencies
      - name: Install dependencies
        run: |
          python - pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-dev.txt
      # Bring in our apple certificate to the keychain of the runner
      - name: Import Apple Certificate
        if: matrix.os == 'macos-x86' || matrix.os == 'macos-arm64'
        run: |
          if security list-keychains | grep -q "github_build.keychain"; then
            security delete-keychain github_build.keychain
          fi
          security create-keychain -p "" github_build.keychain
          security default-keychain -s github_build.keychain
          security set-keychain-settings -lut 21600 github_build.keychain
          echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > apple_certificate.p12
          security import apple_certificate.p12 -k github_build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" \
            -t cert -f pkcs12 -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/xcrun
          security unlock-keychain -p "" github_build.keychain
          security set-key-partition-list -S 'apple-tool:,apple:' -s -k "" github_build.keychain
          security list-keychain -d user -s github_build.keychain 'login-keychain'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Unlock keychain on Mac
        if: matrix.os == 'macos-x86' || matrix.os == 'macos-arm64'
        run: |
          security unlock-keychain -p "" github_build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" -D "Developer" -t private github_build.keychain

      - name: List available signing identities
        if: matrix.os == 'macos-x86' || matrix.os == 'macos-arm64'
        run: |
          security find-identity -v -p codesigning

      # write a .env file with the secrets
      - name: Write .env file Mac & Linux
        if: matrix.os != 'windows-latest'
        run: |
          echo "LOCAL_RELEASE_TAG=${GITHUB_REF_NAME}" >> .env
          echo "LOCAL_RELEASE_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> .env

      # Build app with Pyinstaller on Mac
      - name: Build with Py2App (MacOS)
        if: matrix.os == 'macos-x86' || matrix.os == 'macos-arm64'
        run: |
          python setup.py py2app
        env:
          APPLE_APP_DEVELOPER_ID: ${{ secrets.APPLE_APP_DEVELOPER_ID }}

      - name: Codesign Application for Notarization
        if: matrix.os == 'macos-x86' || matrix.os == 'macos-arm64'
        run: |
          cd dist
          find "MarkerMatic.app" -iname '*.so' -or -iname '*.dylib' |
          while read libfile; do
            codesign -s "${{ secrets.APPLE_CERTIFICATE_NAME }}" \
            --entitlements ../entitlements.plist \
            --deep "${libfile}" \
            --force \
            --timestamp \
            --options runtime;
          done;
          codesign -s "${{ secrets.APPLE_CERTIFICATE_NAME }}" --deep --force --entitlements "../entitlements.plist" --options runtime --timestamp  "MarkerMatic.app" 
          codesign --verify --verbose=4 "MarkerMatic.app"
      - name: Zip Application for Notarization
        if: (matrix.os == 'macos-x86' || matrix.os == 'macos-arm64')
        run: |
          ditto -c -k --keepParent "dist/MarkerMatic.app" "MarkerMatic.zip"
      # Send the application zip to Apple for Notarization and stapling
      - name: Notarize and Staple
        if: (matrix.os == 'macos-x86' || matrix.os == 'macos-arm64')
        run: |
          xcrun notarytool submit "MarkerMatic.zip" --apple-id \
            "${{ secrets.APPLE_DEVELOPER_ID_USER }}" --password \
            "${{ secrets.APPLE_DEVELOPER_ID_PASSWORD }}" --team-id \
            "${{ secrets.APPLE_DEVELOPER_ID_TEAM }}" --wait --verbose
          chmod 755 "dist/MarkerMatic.app"
          xcrun stapler staple "dist/MarkerMatic.app"

      - name: Verify Notarization
        if: (matrix.os == 'macos-x86' || matrix.os == 'macos-arm64')
        run: |
          spctl -a -v "dist/MarkerMatic.app"
          rm "MarkerMatic.zip"
      # Build an installer DMG for MacOS
      - name: Create dmg MacOS
        if: matrix.os == 'macos-x86' || matrix.os == 'macos-arm64'
        run: |
          chmod a+x "dist/MarkerMatic.app"
          brew update
          brew install create-dmg
          max_tries=10
          i=0
          until create-dmg \
            --volname "MarkerMatic Installer" \
            --app-drop-link 600 185 \
            --window-pos 200 120 \
            --window-size 800 400 \
            --hide-extension "MarkerMatic.app" \
            "MarkerMatic Installer"-${{ matrix.os }}.dmg \
            "dist/MarkerMatic.app"
          do
            if [ $i -eq $max_tries ]
            then
              echo "create-dmg did not succeed even after 10 tries."
              exit 1
            fi
            i=$((i+1))
          done

      # Add the built binaries to the release
      - name: Release
        uses: softprops/action-gh-release@v2

        with:
          tag_name: ${{needs.create_release.outputs.tag_name}}
          draft: true
          files: |
            MarkerMatic\ Installer-macos-arm64.dmg
            MarkerMatic\ Installer-macos-x86.dmg
